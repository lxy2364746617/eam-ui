{"remainingRequest":"E:\\qrhpro\\cms-eam-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\qrhpro\\cms-eam-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\qrhpro\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\qrhpro\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\executionListener.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\qrhpro\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\executionListener.vue","mtime":1693791859048},{"path":"E:\\qrhpro\\cms-eam-ui\\babel.config.js","mtime":1693791556521},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693791616229},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1693791596985},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693791616229},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1693791844037}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_mixinPanel","_interopRequireDefault","require","_listenerParam","_Listener","_listenerList","components","ListenerList","listenerParam","FlowListener","mixins","mixinPanel","data","dialogVisible","listenerDialogVisible","showParamDialog","nowIndex","formData","executionListener","computed","formConfig","inline","item","xType","tabs","label","name","column","width","rules","required","message","trigger","dic","value","tooltip","slot","mounted","_this","_this$element$busines","_this$element$busines2","$nextTick","addButton","element","businessObject","extensionElements","values","filter","$type","map","_item$fields$map","_item$fields","type","event","className","params","fields","field","fieldType","methods","_this2","button","document","createElement","innerText","setAttribute","addEventListener","div","getElementById","table","getElementsByClassName","insertBefore","configParam","index","nowObj","finishConfigParam","param","cache","$set","updateElement","_this$formData$execut","_this3","length","_extensionElements$va","_extensionElements$va2","get","modeler","create","forEach","fieldElement","push","updateProperties","_extensionElements$va3","_extensionElements$va4","closeDialog","_this4","console","log","$refs","xForm","validate","then","catch","e","error","addListener","concat","exports","default","_default"],"sources":["src/components/Process/components/nodePanel/property/executionListener.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog\r\n      title=\"执行监听器\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"900px\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n      @closed=\"$emit('close')\"\r\n    >\r\n      <x-form ref=\"xForm\" v-model=\"formData\" :config=\"formConfig\">\r\n        <template #params=\"scope\">\r\n          <el-badge :value=\"scope.row.params ? scope.row.params.length : 0\" type=\"primary\">\r\n            <el-button size=\"small\" @click=\"configParam(scope.$index)\">配置</el-button>\r\n          </el-badge>\r\n        </template>\r\n      </x-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" size=\"medium\" @click=\"closeDialog\">确 定</el-button>\r\n      </span>\r\n      <listener-list\r\n        :visible=\"listenerDialogVisible\"\r\n        @close=\"() => this.listenerDialogVisible = false\"\r\n        @submit=\"addListener\"\r\n      />\r\n    </el-dialog>\r\n    <listenerParam v-if=\"showParamDialog\" :value=\"formData.executionListener[nowIndex].params\" @close=\"finishConfigParam\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mixinPanel from '../../../common/mixinPanel'\r\nimport listenerParam from './listenerParam'\r\nimport FlowListener from '@/components/flow/Listener'\r\nimport ListenerList from '@/components/Process/components/nodePanel/property/listenerList'\r\nexport default {\r\n  components: { ListenerList, listenerParam, FlowListener },\r\n  mixins: [mixinPanel],\r\n  data() {\r\n    return {\r\n      dialogVisible: true,\r\n      listenerDialogVisible: false,\r\n      showParamDialog: false,\r\n      nowIndex: null,\r\n      formData: {\r\n        executionListener: []\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    formConfig() {\r\n      //   const _this = this\r\n      return {\r\n        inline: false,\r\n        item: [\r\n          {\r\n            xType: 'tabs',\r\n            tabs: [\r\n              {\r\n                label: '执行监听器',\r\n                name: 'executionListener',\r\n                column: [\r\n                  {\r\n                    label: '事件',\r\n                    name: 'event',\r\n                    width: 180,\r\n                    rules: [{ required: true, message: '请选择', trigger: ['blur', 'change'] }],\r\n                    xType: 'select',\r\n                    dic: [\r\n                      { label: 'start', value: 'start' },\r\n                      { label: 'end', value: 'end' },\r\n                      { label: 'take', value: 'take' }\r\n                    ]\r\n                  },\r\n                  {\r\n                    label: '类型',\r\n                    name: 'type',\r\n                    width: 180,\r\n                    rules: [{ required: true, message: '请选择', trigger: ['blur', 'change'] }],\r\n                    xType: 'select',\r\n                    dic: [\r\n                      { label: '类', value: 'class' },\r\n                      { label: '表达式', value: 'expression' },\r\n                      { label: '委托表达式', value: 'delegateExpression' }\r\n                    ],\r\n                    tooltip: `类：示例 com.company.MyCustomListener，自定义类必须实现 org.flowable.engine.delegate.ExecutionListener 接口 <br />\r\n                              表达式：示例 \\${myObject.callMethod(task, task.eventName)} <br />\r\n                              委托表达式：示例 \\${myListenerSpringBean} ，该 springBean 需要实现 org.flowable.engine.delegate.ExecutionListener 接口\r\n                    `\r\n                  },\r\n                  {\r\n                    label: '值',\r\n                    name: 'className',\r\n                    xType: 'input',\r\n                    rules: [{ required: true, message: '请输入', trigger: ['blur', 'change'] }]\r\n                  },\r\n                  {\r\n                    xType: 'slot',\r\n                    label: '参数',\r\n                    width: 120,\r\n                    slot: true,\r\n                    name: 'params'\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => this.addButton())\r\n    this.formData.executionListener = this.element.businessObject.extensionElements?.values\r\n      .filter(item => item.$type === 'flowable:ExecutionListener')\r\n      .map(item => {\r\n        let type\r\n        if ('class' in item) type = 'class'\r\n        if ('expression' in item) type = 'expression'\r\n        if ('delegateExpression' in item) type = 'delegateExpression'\r\n        return {\r\n          event: item.event,\r\n          type: type,\r\n          className: item[type],\r\n          params: item.fields?.map(field => {\r\n            let fieldType\r\n            if ('stringValue' in field) fieldType = 'stringValue'\r\n            if ('expression' in field) fieldType = 'expression'\r\n            return {\r\n              name: field.name,\r\n              type: fieldType,\r\n              value: field[fieldType]\r\n            }\r\n          }) ?? []\r\n        }\r\n      }) ?? []\r\n  },\r\n  methods: {\r\n    addButton() {\r\n      const button = document.createElement('button')\r\n      button.innerText = '内置监听器'\r\n      button.setAttribute('type', 'button')\r\n      button.setAttribute('class', 'el-button el-button--primary el-button--mini')\r\n      button.addEventListener('click', () => this.listenerDialogVisible = true)\r\n      const div = document.getElementById('pane-executionListener')\r\n      const table = div.getElementsByClassName('el-table')[0]\r\n      div.insertBefore(button, table)\r\n    },\r\n    configParam(index) {\r\n      this.nowIndex = index\r\n      const nowObj = this.formData.executionListener[index]\r\n      if (!nowObj.params) {\r\n        nowObj.params = []\r\n      }\r\n      this.showParamDialog = true\r\n    },\r\n    finishConfigParam(param) {\r\n      this.showParamDialog = false\r\n      // hack 数量不更新问题\r\n      const cache = this.formData.executionListener[this.nowIndex]\r\n      cache.params = param\r\n      this.$set(this.formData.executionListener[this.nowIndex], this.nowIndex, cache)\r\n      this.nowIndex = null\r\n    },\r\n    updateElement() {\r\n      if (this.formData.executionListener?.length) {\r\n        let extensionElements = this.element.businessObject.get('extensionElements')\r\n        if (!extensionElements) {\r\n          extensionElements = this.modeler.get('moddle').create('bpmn:ExtensionElements')\r\n        }\r\n        // 清除旧值\r\n        extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'flowable:ExecutionListener') ?? []\r\n        this.formData.executionListener.forEach(item => {\r\n          const executionListener = this.modeler.get('moddle').create('flowable:ExecutionListener')\r\n          executionListener['event'] = item.event\r\n          executionListener[item.type] = item.className\r\n          if (item.params && item.params.length) {\r\n            item.params.forEach(field => {\r\n              const fieldElement = this.modeler.get('moddle').create('flowable:Field')\r\n              fieldElement['name'] = field.name\r\n              fieldElement[field.type] = field.value\r\n              // 注意：flowable.json 中定义的string和expression类为小写，不然会和原生的String类冲突，此处为hack\r\n              // const valueElement = this.modeler.get('moddle').create(`flowable:${field.type}`, { body: field.value })\r\n              // fieldElement[field.type] = valueElement\r\n              executionListener.get('fields').push(fieldElement)\r\n            })\r\n          }\r\n          extensionElements.get('values').push(executionListener)\r\n        })\r\n        this.updateProperties({ extensionElements: extensionElements })\r\n      } else {\r\n        const extensionElements = this.element.businessObject[`extensionElements`]\r\n        if (extensionElements) {\r\n          extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'flowable:ExecutionListener') ?? []\r\n        }\r\n      }\r\n    },\r\n    closeDialog() {\r\n      console.log(this.formData)\r\n      this.$refs.xForm.validate().then(() => {\r\n        this.updateElement()\r\n        this.dialogVisible = false\r\n      }).catch(e => console.error(e))\r\n    },\r\n    addListener(data) {\r\n      this.formData.executionListener = this.formData.executionListener.concat(data)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.flow-containers  .el-badge__content.is-fixed {\r\n  top: 18px;\r\n}\r\n</style>\r\n"],"mappings":"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"}]}