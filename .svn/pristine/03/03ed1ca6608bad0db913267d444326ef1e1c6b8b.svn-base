{"remainingRequest":"E:\\qrhpro\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\qrhpro\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\signal.vue?vue&type=style&index=0&id=4951594c&lang=css&","dependencies":[{"path":"E:\\qrhpro\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\signal.vue","mtime":1693791859056},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1693791655299},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1693791844037},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1693791775035},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693791616229},{"path":"E:\\qrhpro\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1693791844037}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmZsb3ctY29udGFpbmVycyAgLmVsLWJhZGdlX19jb250ZW50LmlzLWZpeGVkIHsNCiAgICB0b3A6IDE4cHg7DQp9DQo="},{"version":3,"sources":["signal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AACA","file":"signal.vue","sourceRoot":"src/components/Process/components/nodePanel/property","sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog\r\n      title=\"信号定义\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"700px\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n      @closed=\"$emit('close')\"\r\n    >\r\n      <x-form ref=\"xForm\" v-model=\"formData\" :config=\"formConfig\" />\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" size=\"medium\" @click=\"closeDialog\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mixinPanel from '../../../common/mixinPanel'\r\nexport default {\r\n  mixins: [mixinPanel],\r\n  data() {\r\n    return {\r\n      dialogVisible: true,\r\n      formData: {\r\n        signal: []\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    formConfig() {\r\n    //   const _this = this\r\n      return {\r\n        inline: false,\r\n        item: [\r\n          {\r\n            xType: 'tabs',\r\n            tabs: [\r\n              {\r\n                label: '信号定义',\r\n                name: 'signal',\r\n                column: [\r\n                  {\r\n                    label: 'scope',\r\n                    name: 'scope',\r\n                    width: 180,\r\n                    rules: [{ required: true, message: '请选择', trigger: ['blur', 'change'] }],\r\n                    xType: 'select',\r\n                    dic: [\r\n                      { label: '全局', value: 'start' },\r\n                      { label: '流程实例', value: 'end' }\r\n                    ]\r\n                  },\r\n                  {\r\n                    label: 'id',\r\n                    name: 'id',\r\n                    width: 200,\r\n                    rules: [{ required: true, message: '请输入', trigger: ['blur', 'change'] }],\r\n                    xType: 'input'\r\n                  },\r\n                  {\r\n                    label: '名称',\r\n                    name: 'name',\r\n                    xType: 'input',\r\n                    rules: [{ required: true, message: '请输入', trigger: ['blur', 'change'] }]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // this.formData.signal = this.element.businessObject.extensionElements?.values.map(item => {\r\n    this.formData.signal = this.element.businessObject.extensionElements?.values\r\n      .filter(item => item.$type === 'bpmn:Signal')\r\n      .map(item => {\r\n        return {\r\n          scope: item.scope,\r\n          id: item.id,\r\n          name: item.name\r\n        }\r\n      }) ?? []\r\n  },\r\n  methods: {\r\n    updateElement() {\r\n      // if (this.formData.signal?.length) {\r\n      //   let extensionElements = this.element.businessObject.get('extensionElements')\r\n      //   if (!extensionElements) {\r\n      //     console.log(this.modeler.get('moddle'),\"this.modeler.get('moddle')\")\r\n      //     extensionElements = this.modeler.get('moddle').create('bpmn:Signal')\r\n      //   }\r\n      //   extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'bpmn:Signal') ?? []\r\n      //   console.log(extensionElements,\"extensionElements\")\r\n      //   const length = extensionElements.get('values').length\r\n      //   for (let i = 0; i < length; i++) {\r\n      //     // 清除旧值\r\n      //     extensionElements.get('values').pop()\r\n      //   }\r\n      //   this.updateProperties({ extensionElements: extensionElements })\r\n      // } else {\r\n      //   const extensionElements = this.element.businessObject[`extensionElements`]\r\n      //   if (extensionElements) {\r\n      //     extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'flowable:ExecutionListener')\r\n      //   }\r\n      // }\r\n      if (this.formData.signal?.length) {\r\n        let extensionElements = this.element.businessObject.get('extensionElements')\r\n        if (!extensionElements) {\r\n          extensionElements = this.modeler.get('moddle').create('bpmn:ExtensionElements')\r\n        }\r\n        // 清除旧值\r\n        extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'bpmn:Signal') ?? []\r\n        this.formData.signal.forEach(item => {\r\n          const signal = this.modeler.get('moddle').create('bpmn:Signal')\r\n          signal['scope'] = item.scope\r\n          signal['id'] = item.id\r\n          signal['name'] = item.name\r\n          extensionElements.get('values').push(signal)\r\n        })\r\n        this.updateProperties({ extensionElements: extensionElements })\r\n      } else {\r\n        const extensionElements = this.element.businessObject[`extensionElements`]\r\n        if (extensionElements) {\r\n          extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'bpmn:Signal') ?? []\r\n        }\r\n      }\r\n    },\r\n    closeDialog() {\r\n      this.$refs.xForm.validate().then(() => {\r\n        this.updateElement()\r\n        this.dialogVisible = false\r\n      }).catch(e => console.error(e))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.flow-containers  .el-badge__content.is-fixed {\r\n    top: 18px;\r\n}\r\n</style>\r\n"]}]}