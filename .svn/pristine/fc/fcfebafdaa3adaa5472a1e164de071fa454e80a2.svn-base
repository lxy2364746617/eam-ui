{"remainingRequest":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\visual_code_work_space\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\multiInstance.vue?vue&type=style&index=0&id=c59c420c&lang=css&","dependencies":[{"path":"E:\\visual_code_work_space\\cms-eam-ui\\src\\components\\Process\\components\\nodePanel\\property\\multiInstance.vue","mtime":1693557459608},{"path":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\cms-eam-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5tdXRpLWluc3RhbmNlIC5lbC1mb3JtLWl0ZW0gew0KICBtYXJnaW4tYm90dG9tOiAyMnB4Ow0KfQ0K"},{"version":3,"sources":["multiInstance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;AACA;AACA","file":"multiInstance.vue","sourceRoot":"src/components/Process/components/nodePanel/property","sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog\r\n      title=\"多实例配置\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"600px\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      class=\"muti-instance\"\r\n      @closed=\"$emit('close')\"\r\n    >\r\n      <el-descriptions :column=\"1\" size=\"mini\" border>\r\n        <el-descriptions-item label=\"使用说明\">按照BPMN2.0规范的要求，用于为每个实例创建执行的父执行，会提供下列变量:</el-descriptions-item>\r\n        <el-descriptions-item label=\"nrOfInstances\">实例总数。</el-descriptions-item>\r\n        <el-descriptions-item label=\"nrOfActiveInstances\">当前活动的（即未完成的），实例数量。对于顺序多实例，这个值总为1。</el-descriptions-item>\r\n        <el-descriptions-item label=\"nrOfCompletedInstances\">已完成的实例数量。</el-descriptions-item>\r\n        <el-descriptions-item label=\"loopCounter\">给定实例在for-each循环中的index。</el-descriptions-item>\r\n      </el-descriptions>\r\n      <div class=\"app-container\">\r\n       <x-form ref=\"xForm\" v-model=\"formData\" :config=\"formConfig\" />\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mixinPanel from '@/components/Process/common/mixinPanel'\r\nimport {formatJsonKeyValue} from '@/components/Process/common/parseElement'\r\n\r\nexport default {\r\n  mixins: [mixinPanel],\r\n  data() {\r\n    return {\r\n      dialogVisible: true,\r\n      formData: {},\r\n      prefix: 'flowable:',\r\n    }\r\n  },\r\n  computed: {\r\n    formConfig() {\r\n      const _this = this\r\n      return {\r\n        inline: false,\r\n        item: [\r\n          {\r\n            xType: 'input',\r\n            name: 'collection',\r\n            label: '集合',\r\n            tooltip: 'collection: 属性会作为表达式进行解析。如果表达式解析为字符串而不是一个集合，<br />不论是因为本身配置的就是静态字符串值，还是表达式计算结果为字符串，<br />这个字符串都会被当做变量名，并从流程变量中用于获取实际的集合。',\r\n            // rules: [{ required: true, message: '请输入集合名称', trigger: ['blur', 'change'] }]\r\n          },\r\n          {\r\n            xType: 'input',\r\n            name: 'elementVariable',\r\n            label: '元素变量',\r\n            tooltip: 'elementVariable: 每创建一个用户任务前，先以该元素变量为label，集合中的一项为value，<br />创建（局部）流程变量，该局部流程变量被用于指派用户任务。<br />一般来说，该字符串应与指定人员变量相同。',\r\n            // rules: [{ required: true, message: '请输入元素变量', trigger: ['blur', 'change'] }]\r\n          },\r\n          {\r\n            xType: 'select',\r\n            name: 'isSequential',\r\n            label: '执行方式',\r\n            tooltip: '并行会签（parallel）、串行会签(sequential)，其中并行会签的意思是 多个人同时执行任务。串行会签是按顺序执行任务。',\r\n            dic: [{label: '串行', value: true}, {label: '并行', value: false}],\r\n            // rules: [{ required: true, message: '请选择执行方式', trigger: ['blur', 'change'] }]\r\n          },\r\n          {\r\n            xType: 'input',\r\n            name: 'completionCondition',\r\n            label: '完成条件',\r\n            tooltip: 'completionCondition: 多实例活动在所有实例都完成时结束，然而也可以指定一个表达式，在每个实例<br />结束时进行计算。当表达式计算为true时，将销毁所有剩余的实例，并结束多实例<br />活动，继续执行流程。例如 ${nrOfCompletedInstances/nrOfInstances >= 0.6 }，<br />表示当任务完成60%时，该节点就算完成',\r\n            // rules: [{ required: true, message: '请输入完成条件', trigger: ['blur', 'change'] }]\r\n          }\r\n        ],\r\n        operate: [\r\n          { text: '确定', show: true, click: _this.save },\r\n          { text: '清空', show: true, click: () => { _this.formData = {} } }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    const cache = JSON.parse(JSON.stringify(this.element.businessObject.loopCharacteristics ?? {}))\r\n    cache.completionCondition = cache.completionCondition?.body\r\n    // 拼接多实例对象\r\n    if (this.element.businessObject.loopCharacteristics) {\r\n      Object.assign(cache, this.element.businessObject.loopCharacteristics.$attrs)\r\n    }\r\n    this.formData = formatJsonKeyValue(cache)\r\n  },\r\n  methods: {\r\n    updateElement() {\r\n      if (this.formData.isSequential !== null && this.formData.isSequential !== undefined) {\r\n        // const model = this.modeler.get('moddle');\r\n        let loopCharacteristics = this.element.businessObject.get('loopCharacteristics')\r\n        if (!loopCharacteristics) {\r\n          loopCharacteristics = this.modeler.get('moddle').create('bpmn:MultiInstanceLoopCharacteristics')\r\n        }\r\n        loopCharacteristics['isSequential'] = this.formData.isSequential\r\n        loopCharacteristics['collection'] = this.formData.collection\r\n        loopCharacteristics['elementVariable'] = this.formData.elementVariable\r\n        // let loopCardinality = model.create(\"bpmn:Expression\",{\r\n        //   body: \"4\"\r\n        // });\r\n        // loopCharacteristics['loopCardinality'] = loopCardinality\r\n\r\n        loopCharacteristics.$attrs['isSequential'] = this.formData.isSequential\r\n        loopCharacteristics.$attrs[this.prefix + 'collection'] = this.formData.collection\r\n        loopCharacteristics.$attrs[this.prefix + 'elementVariable'] = this.formData.elementVariable\r\n\r\n        if (this.formData.completionCondition) {\r\n          loopCharacteristics['completionCondition'] = this.modeler.get('moddle').create('bpmn:Expression', {body: this.formData.completionCondition})\r\n        }\r\n        this.updateProperties({loopCharacteristics: loopCharacteristics})\r\n      } else {\r\n        delete this.element.businessObject.loopCharacteristics\r\n      }\r\n    },\r\n    save() {\r\n      this.$refs['xForm'].validate().then(() => {\r\n        this.updateElement()\r\n        this.dialogVisible = false\r\n      }).catch(e => console.error(e));\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.muti-instance .el-form-item {\r\n  margin-bottom: 22px;\r\n}\r\n</style>\r\n"]}]}