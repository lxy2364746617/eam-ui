{"remainingRequest":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\visual_code_work_space\\ruoyi-ui\\src\\components\\Process\\components\\nodePanel\\property\\executionListener.vue?vue&type=style&index=0&id=4d7decf8&lang=css&","dependencies":[{"path":"E:\\visual_code_work_space\\ruoyi-ui\\src\\components\\Process\\components\\nodePanel\\property\\executionListener.vue","mtime":1693557459607},{"path":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\visual_code_work_space\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5mbG93LWNvbnRhaW5lcnMgIC5lbC1iYWRnZV9fY29udGVudC5pcy1maXhlZCB7DQogIHRvcDogMThweDsNCn0NCg=="},{"version":3,"sources":["executionListener.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqNA;AACA;AACA","file":"executionListener.vue","sourceRoot":"src/components/Process/components/nodePanel/property","sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog\r\n      title=\"执行监听器\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"900px\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n      @closed=\"$emit('close')\"\r\n    >\r\n      <x-form ref=\"xForm\" v-model=\"formData\" :config=\"formConfig\">\r\n        <template #params=\"scope\">\r\n          <el-badge :value=\"scope.row.params ? scope.row.params.length : 0\" type=\"primary\">\r\n            <el-button size=\"small\" @click=\"configParam(scope.$index)\">配置</el-button>\r\n          </el-badge>\r\n        </template>\r\n      </x-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" size=\"medium\" @click=\"closeDialog\">确 定</el-button>\r\n      </span>\r\n      <listener-list\r\n        :visible=\"listenerDialogVisible\"\r\n        @close=\"() => this.listenerDialogVisible = false\"\r\n        @submit=\"addListener\"\r\n      />\r\n    </el-dialog>\r\n    <listenerParam v-if=\"showParamDialog\" :value=\"formData.executionListener[nowIndex].params\" @close=\"finishConfigParam\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mixinPanel from '../../../common/mixinPanel'\r\nimport listenerParam from './listenerParam'\r\nimport FlowListener from '@/components/flow/Listener'\r\nimport ListenerList from '@/components/Process/components/nodePanel/property/listenerList'\r\nexport default {\r\n  components: { ListenerList, listenerParam, FlowListener },\r\n  mixins: [mixinPanel],\r\n  data() {\r\n    return {\r\n      dialogVisible: true,\r\n      listenerDialogVisible: false,\r\n      showParamDialog: false,\r\n      nowIndex: null,\r\n      formData: {\r\n        executionListener: []\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    formConfig() {\r\n      //   const _this = this\r\n      return {\r\n        inline: false,\r\n        item: [\r\n          {\r\n            xType: 'tabs',\r\n            tabs: [\r\n              {\r\n                label: '执行监听器',\r\n                name: 'executionListener',\r\n                column: [\r\n                  {\r\n                    label: '事件',\r\n                    name: 'event',\r\n                    width: 180,\r\n                    rules: [{ required: true, message: '请选择', trigger: ['blur', 'change'] }],\r\n                    xType: 'select',\r\n                    dic: [\r\n                      { label: 'start', value: 'start' },\r\n                      { label: 'end', value: 'end' },\r\n                      { label: 'take', value: 'take' }\r\n                    ]\r\n                  },\r\n                  {\r\n                    label: '类型',\r\n                    name: 'type',\r\n                    width: 180,\r\n                    rules: [{ required: true, message: '请选择', trigger: ['blur', 'change'] }],\r\n                    xType: 'select',\r\n                    dic: [\r\n                      { label: '类', value: 'class' },\r\n                      { label: '表达式', value: 'expression' },\r\n                      { label: '委托表达式', value: 'delegateExpression' }\r\n                    ],\r\n                    tooltip: `类：示例 com.company.MyCustomListener，自定义类必须实现 org.flowable.engine.delegate.ExecutionListener 接口 <br />\r\n                              表达式：示例 \\${myObject.callMethod(task, task.eventName)} <br />\r\n                              委托表达式：示例 \\${myListenerSpringBean} ，该 springBean 需要实现 org.flowable.engine.delegate.ExecutionListener 接口\r\n                    `\r\n                  },\r\n                  {\r\n                    label: '值',\r\n                    name: 'className',\r\n                    xType: 'input',\r\n                    rules: [{ required: true, message: '请输入', trigger: ['blur', 'change'] }]\r\n                  },\r\n                  {\r\n                    xType: 'slot',\r\n                    label: '参数',\r\n                    width: 120,\r\n                    slot: true,\r\n                    name: 'params'\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => this.addButton())\r\n    this.formData.executionListener = this.element.businessObject.extensionElements?.values\r\n      .filter(item => item.$type === 'flowable:ExecutionListener')\r\n      .map(item => {\r\n        let type\r\n        if ('class' in item) type = 'class'\r\n        if ('expression' in item) type = 'expression'\r\n        if ('delegateExpression' in item) type = 'delegateExpression'\r\n        return {\r\n          event: item.event,\r\n          type: type,\r\n          className: item[type],\r\n          params: item.fields?.map(field => {\r\n            let fieldType\r\n            if ('stringValue' in field) fieldType = 'stringValue'\r\n            if ('expression' in field) fieldType = 'expression'\r\n            return {\r\n              name: field.name,\r\n              type: fieldType,\r\n              value: field[fieldType]\r\n            }\r\n          }) ?? []\r\n        }\r\n      }) ?? []\r\n  },\r\n  methods: {\r\n    addButton() {\r\n      const button = document.createElement('button')\r\n      button.innerText = '内置监听器'\r\n      button.setAttribute('type', 'button')\r\n      button.setAttribute('class', 'el-button el-button--primary el-button--mini')\r\n      button.addEventListener('click', () => this.listenerDialogVisible = true)\r\n      const div = document.getElementById('pane-executionListener')\r\n      const table = div.getElementsByClassName('el-table')[0]\r\n      div.insertBefore(button, table)\r\n    },\r\n    configParam(index) {\r\n      this.nowIndex = index\r\n      const nowObj = this.formData.executionListener[index]\r\n      if (!nowObj.params) {\r\n        nowObj.params = []\r\n      }\r\n      this.showParamDialog = true\r\n    },\r\n    finishConfigParam(param) {\r\n      this.showParamDialog = false\r\n      // hack 数量不更新问题\r\n      const cache = this.formData.executionListener[this.nowIndex]\r\n      cache.params = param\r\n      this.$set(this.formData.executionListener[this.nowIndex], this.nowIndex, cache)\r\n      this.nowIndex = null\r\n    },\r\n    updateElement() {\r\n      if (this.formData.executionListener?.length) {\r\n        let extensionElements = this.element.businessObject.get('extensionElements')\r\n        if (!extensionElements) {\r\n          extensionElements = this.modeler.get('moddle').create('bpmn:ExtensionElements')\r\n        }\r\n        // 清除旧值\r\n        extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'flowable:ExecutionListener') ?? []\r\n        this.formData.executionListener.forEach(item => {\r\n          const executionListener = this.modeler.get('moddle').create('flowable:ExecutionListener')\r\n          executionListener['event'] = item.event\r\n          executionListener[item.type] = item.className\r\n          if (item.params && item.params.length) {\r\n            item.params.forEach(field => {\r\n              const fieldElement = this.modeler.get('moddle').create('flowable:Field')\r\n              fieldElement['name'] = field.name\r\n              fieldElement[field.type] = field.value\r\n              // 注意：flowable.json 中定义的string和expression类为小写，不然会和原生的String类冲突，此处为hack\r\n              // const valueElement = this.modeler.get('moddle').create(`flowable:${field.type}`, { body: field.value })\r\n              // fieldElement[field.type] = valueElement\r\n              executionListener.get('fields').push(fieldElement)\r\n            })\r\n          }\r\n          extensionElements.get('values').push(executionListener)\r\n        })\r\n        this.updateProperties({ extensionElements: extensionElements })\r\n      } else {\r\n        const extensionElements = this.element.businessObject[`extensionElements`]\r\n        if (extensionElements) {\r\n          extensionElements.values = extensionElements.values?.filter(item => item.$type !== 'flowable:ExecutionListener') ?? []\r\n        }\r\n      }\r\n    },\r\n    closeDialog() {\r\n      console.log(this.formData)\r\n      this.$refs.xForm.validate().then(() => {\r\n        this.updateElement()\r\n        this.dialogVisible = false\r\n      }).catch(e => console.error(e))\r\n    },\r\n    addListener(data) {\r\n      this.formData.executionListener = this.formData.executionListener.concat(data)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.flow-containers  .el-badge__content.is-fixed {\r\n  top: 18px;\r\n}\r\n</style>\r\n"]}]}